
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_SFNO_swe.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_SFNO_swe.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_SFNO_swe.py:


Training a SFNO on the spherical Shallow Water equations
==========================================================

In this example, we demonstrate how to use the small Spherical Shallow Water Equations example we ship with the package
to train a Spherical Fourier-Neural Operator

.. GENERATED FROM PYTHON SOURCE LINES 11-25

.. code-block:: Python



    import torch
    import matplotlib.pyplot as plt
    import sys
    from neuralop.models import SFNO
    from neuralop import Trainer
    from neuralop.training import AdamW
    from neuralop.data.datasets import load_spherical_swe
    from neuralop.utils import count_model_params
    from neuralop import LpLoss, H1Loss

    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Loading the Navier-Stokes dataset in 128x128 resolution

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: Python

    train_loader, test_loaders = load_spherical_swe(n_train=200, batch_size=4, train_resolution=(32, 64),
                                                    test_resolutions=[(32, 64), (64, 128)], n_tests=[50, 50], test_batch_sizes=[10, 10],)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading train dataloader at resolution (32, 64) with 200 samples and batch-size=4
    Loading test dataloader at resolution (32, 64) with 50 samples and batch-size=10
    Loading test dataloader at resolution (64, 128) with 50 samples and batch-size=10




.. GENERATED FROM PYTHON SOURCE LINES 32-33

We create a tensorized FNO model

.. GENERATED FROM PYTHON SOURCE LINES 33-47

.. code-block:: Python


    model = SFNO(n_modes=(32, 32),
                 in_channels=3,
                 out_channels=3,
                 hidden_channels=32,
                 projection_channels=64,
                 factorization='dense')
    model = model.to(device)

    n_params = count_model_params(model)
    print(f'\nOur model has {n_params} parameters.')
    sys.stdout.flush()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    self.sht_grids=['equiangular', 'equiangular']
    self.sht_grids=['equiangular', 'equiangular']
    self.sht_grids=['equiangular', 'equiangular']
    self.sht_grids=['equiangular', 'equiangular']

    Our model has 275555 parameters.




.. GENERATED FROM PYTHON SOURCE LINES 48-49

Create the optimizer

.. GENERATED FROM PYTHON SOURCE LINES 49-55

.. code-block:: Python

    optimizer = AdamW(model.parameters(), 
                                    lr=8e-4, 
                                    weight_decay=0.0)
    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)









.. GENERATED FROM PYTHON SOURCE LINES 56-57

Creating the losses

.. GENERATED FROM PYTHON SOURCE LINES 57-64

.. code-block:: Python

    l2loss = LpLoss(d=2, p=2, reduce_dims=(0,1))
    # h1loss = H1Loss(d=2, reduce_dims=(0,1))

    train_loss = l2loss
    eval_losses={'l2': l2loss} #'h1': h1loss, 









.. GENERATED FROM PYTHON SOURCE LINES 65-76

.. code-block:: Python



    print('\n### MODEL ###\n', model)
    print('\n### OPTIMIZER ###\n', optimizer)
    print('\n### SCHEDULER ###\n', scheduler)
    print('\n### LOSSES ###')
    print(f'\n * Train: {train_loss}')
    print(f'\n * Test: {eval_losses}')
    sys.stdout.flush()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ### MODEL ###
     SFNO(
      (positional_embedding): GridEmbeddingND()
      (fno_blocks): FNOBlocks(
        (convs): ModuleList(
          (0-3): 4 x SphericalConv(
            (weight): ComplexDenseTensor(shape=torch.Size([32, 32, 32]), rank=None)
            (sht_handle): SHT(
              (_SHT_cache): ModuleDict()
              (_iSHT_cache): ModuleDict()
            )
          )
        )
        (fno_skips): ModuleList(
          (0-3): 4 x Flattened1dConv(
            (conv): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (channel_mlp): ModuleList(
          (0-3): 4 x ChannelMLP(
            (fcs): ModuleList(
              (0): Conv1d(32, 16, kernel_size=(1,), stride=(1,))
              (1): Conv1d(16, 32, kernel_size=(1,), stride=(1,))
            )
          )
        )
        (channel_mlp_skips): ModuleList(
          (0-3): 4 x SoftGating()
        )
      )
      (lifting): ChannelMLP(
        (fcs): ModuleList(
          (0): Conv1d(5, 64, kernel_size=(1,), stride=(1,))
          (1): Conv1d(64, 32, kernel_size=(1,), stride=(1,))
        )
      )
      (projection): ChannelMLP(
        (fcs): ModuleList(
          (0): Conv1d(32, 64, kernel_size=(1,), stride=(1,))
          (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
        )
      )
    )

    ### OPTIMIZER ###
     AdamW (
    Parameter Group 0
        betas: (0.9, 0.999)
        correct_bias: True
        eps: 1e-06
        initial_lr: 0.0008
        lr: 0.0008
        weight_decay: 0.0
    )

    ### SCHEDULER ###
     <torch.optim.lr_scheduler.CosineAnnealingLR object at 0x7f746f238df0>

    ### LOSSES ###

     * Train: <neuralop.losses.data_losses.LpLoss object at 0x7f746c5a3d90>

     * Test: {'l2': <neuralop.losses.data_losses.LpLoss object at 0x7f746c5a3d90>}




.. GENERATED FROM PYTHON SOURCE LINES 77-78

Create the trainer

.. GENERATED FROM PYTHON SOURCE LINES 78-86

.. code-block:: Python

    trainer = Trainer(model=model, n_epochs=20,
                      device=device,
                      wandb_log=False,
                      eval_interval=3,
                      use_distributed=False,
                      verbose=True)









.. GENERATED FROM PYTHON SOURCE LINES 87-88

Actually train the model on our small Darcy-Flow dataset

.. GENERATED FROM PYTHON SOURCE LINES 88-98

.. code-block:: Python


    trainer.train(train_loader=train_loader,
                  test_loaders=test_loaders,
                  optimizer=optimizer,
                  scheduler=scheduler, 
                  regularizer=False, 
                  training_loss=train_loss,
                  eval_losses=eval_losses)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Training on 200 samples
    Testing on [50, 50] samples         on resolutions [(32, 64), (64, 128)].
    Raw outputs of shape torch.Size([4, 3, 32, 64])
    [0] time=0.91, avg_loss=2.6421, train_err=10.5682
    Eval: (32, 64)_l2=2.1051, (64, 128)_l2=2.4542
    [3] time=0.84, avg_loss=0.3812, train_err=1.5250
    Eval: (32, 64)_l2=0.5328, (64, 128)_l2=2.3434
    [6] time=0.73, avg_loss=0.2580, train_err=1.0322
    Eval: (32, 64)_l2=0.5245, (64, 128)_l2=2.2983
    [9] time=0.73, avg_loss=0.2163, train_err=0.8652
    Eval: (32, 64)_l2=0.4739, (64, 128)_l2=2.2781
    [12] time=0.73, avg_loss=0.1938, train_err=0.7753
    Eval: (32, 64)_l2=0.4735, (64, 128)_l2=2.2642
    [15] time=0.73, avg_loss=0.1628, train_err=0.6512
    Eval: (32, 64)_l2=0.4826, (64, 128)_l2=2.2505
    [18] time=0.73, avg_loss=0.1391, train_err=0.5565
    Eval: (32, 64)_l2=0.4369, (64, 128)_l2=2.2668

    {'train_err': 0.5427721077203751, 'avg_loss': 0.13569302693009377, 'avg_lasso_loss': None, 'epoch_train_time': 0.7358115278184414}



.. GENERATED FROM PYTHON SOURCE LINES 99-109

Plot the prediction, and compare with the ground-truth 
Note that we trained on a very small resolution for
a very small number of epochs
In practice, we would train at larger resolution, on many more samples.

However, for practicity, we created a minimal example that
i) fits in just a few Mb of memory
ii) can be trained quickly on CPU

In practice we would train a Neural Operator on one or multiple GPUs

.. GENERATED FROM PYTHON SOURCE LINES 109-144

.. code-block:: Python


    fig = plt.figure(figsize=(7, 7))
    for index, resolution in enumerate([(32, 64), (64, 128)]):
        test_samples = test_loaders[resolution].dataset
        data = test_samples[0]
        # Input x
        x = data['x']
        # Ground-truth
        y = data['y'][0, ...].numpy()
        # Model prediction
        x_in = x.unsqueeze(0).to(device)
        out = model(x_in).squeeze()[0, ...].detach().cpu().numpy()
        x = x[0, ...].detach().numpy()

        ax = fig.add_subplot(2, 3, index*3 + 1)
        ax.imshow(x)
        ax.set_title(f'Input x {resolution}')
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(2, 3, index*3 + 2)
        ax.imshow(y)
        ax.set_title('Ground-truth y')
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(2, 3, index*3 + 3)
        ax.imshow(out)
        ax.set_title('Model prediction')
        plt.xticks([], [])
        plt.yticks([], [])

    fig.suptitle('Inputs, ground-truth output and prediction.', y=0.98)
    plt.tight_layout()
    fig.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_SFNO_swe_001.png
   :alt: Inputs, ground-truth output and prediction., Input x (32, 64), Ground-truth y, Model prediction, Input x (64, 128), Ground-truth y, Model prediction
   :srcset: /auto_examples/images/sphx_glr_plot_SFNO_swe_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 20.521 seconds)


.. _sphx_glr_download_auto_examples_plot_SFNO_swe.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_SFNO_swe.ipynb <plot_SFNO_swe.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_SFNO_swe.py <plot_SFNO_swe.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
