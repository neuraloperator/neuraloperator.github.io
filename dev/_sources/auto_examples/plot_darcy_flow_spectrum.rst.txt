
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_darcy_flow_spectrum.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_darcy_flow_spectrum.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_darcy_flow_spectrum.py:


A simple Darcy-Flow spectrum analysis
=====================================
In this example, we demonstrate how to use the spectrum analysis function on the small Darcy-Flow example.
For more details on spectrum analysis, users can take a look at this reference: https://www.astronomy.ohio-state.edu/ryden.1/ast825/ch7.pdf

Short summary
-------------

Spectral analysis is useful because it allows researchers to study the distribution of energy across different scales in a fluid flow. By examining the energy spectrum, one can gain insights into the behavior of turbulence or any other dataset and the underlying physical processes. The energy spectrum is analysed through the Fourier transform which is a mathematical tool that decomposes a function or signal into its constituent frequencies. In a fluid flow, it is used to analyze the distribution of energy across different scales in a flow. Specifically, the Fourier transform is applied to the velocity field of the flow, converting it into a frequency domain representation. Higher the wavenumber corresponds to higher frequency and higher energy and is a much harder task to solve as we need higher modes to capture the high-frequency behavior of the flow. Overall this allows researchers to study the energy spectrum, which provides insights into the behavior of turbulence and the underlying physical processes.

.. GENERATED FROM PYTHON SOURCE LINES 13-16

.. code-block:: Python


    # Original Author: Zongyi Li
    # Modified by: Robert Joseph George







.. GENERATED FROM PYTHON SOURCE LINES 17-20

Import the library
------------------
We first import our `neuralop` library and required dependencies.

.. GENERATED FROM PYTHON SOURCE LINES 20-33

.. code-block:: Python

    import numpy as np
    import torch
    import matplotlib
    import matplotlib.pyplot as plt
    from neuralop.utils import spectrum_2d
    from neuralop.data.datasets import load_darcy_flow_small

    font = {'size'   : 28}
    matplotlib.rc('font', **font)

    torch.manual_seed(0)
    np.random.seed(0)








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Define some variables

.. GENERATED FROM PYTHON SOURCE LINES 35-45

.. code-block:: Python

    T = 500 # number of time steps
    samples = 50
    s = 16 # resolution of the dataset

    # additional paramaters for the dataset
    Re = 5000
    index = 1
    T = 100
    dataset_name = "Darcy Flow"








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Loading the Navier-Stokes dataset in 128x128 resolution

.. GENERATED FROM PYTHON SOURCE LINES 47-83

.. code-block:: Python

    train_loader, test_loaders, data_processor = load_darcy_flow_small(
            n_train=50, batch_size=50, 
            test_resolutions=[16, 32], n_tests=[50],
            test_batch_sizes=[32], 
            encode_output=False
    )

    # This is highly depending on your dataset and its structure ['x', 'y'] (In Darcy flow)
    print("Original dataset shape", train_loader.dataset[:samples]['x'].shape) # check the shape

    # It is important to note that we want the last two dimensions to represent the spatial dimensions
    # So in some cases one might have to permute the dataset after squeezing the initial dimensions as well
    dataset_pred = train_loader.dataset[:samples]['x'].squeeze() # squeeze the dataset to remove the batch dimension or other dimensions

    # Shape of the dataset
    shape = dataset_pred.shape

    # Define the grid size - in our case its a 2d Grid repeating, for higher dimensions this will change
    # Example for 3d grid
    """
    batchsize, size_x, size_y, size_z = 1, shape[0], shape[1], shape[2]
    gridx = torch.tensor(np.linspace(-1, 1, size_x), dtype=torch.float)
    gridx = gridx.reshape(1, size_x, 1, 1, 1).repeat([batchsize, 1, size_y, size_z, 1])
    gridy = torch.tensor(np.linspace(-1, 1, size_y), dtype=torch.float)
    gridy = gridy.reshape(1, 1, size_y, 1, 1).repeat([batchsize, size_x, 1, size_z, 1])
    gridz = torch.tensor(np.linspace(-1, 1, size_z), dtype=torch.float)
    gridz = gridz.reshape(1, 1, 1, size_z, 1).repeat([batchsize, size_x, size_y, 1, 1])
    grid = torch.cat((gridx, gridy, gridz), dim=-1)
    """
    batchsize, size_x, size_y = 1, shape[1], shape[2]
    gridx = torch.tensor(np.linspace(-1, 1, size_x), dtype=torch.float)
    gridx = gridx.reshape(1, size_x, 1).repeat([batchsize, 1, size_y])
    gridy = torch.tensor(np.linspace(-1, 1, size_y), dtype=torch.float)
    gridy = gridy.reshape(1, 1, size_y).repeat([batchsize, size_x, 1])
    grid = torch.cat((gridx, gridy), dim=-1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/neuraloperator/neuraloperator/neuralop/data/datasets/pt_dataset.py:93: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
      data = torch.load(
    Loading test db for resolution 16 with 50 samples 
    /home/runner/work/neuraloperator/neuraloperator/neuralop/data/datasets/pt_dataset.py:172: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
      data = torch.load(Path(root_dir).joinpath(f"{dataset_name}_test_{res}.pt").as_posix())
    Original dataset shape torch.Size([50, 1, 16, 16])




.. GENERATED FROM PYTHON SOURCE LINES 84-87

##############################################################
## FFT plot
#############################################################

.. GENERATED FROM PYTHON SOURCE LINES 87-115

.. code-block:: Python


    # Generate the spectrum of the dataset
    # Again only the last two dimensions have to be resolution and the first dimension is the reshaped product of all the other dimensions
    truth_sp = spectrum_2d(dataset_pred.reshape(samples * batchsize, s, s), s)

    # Generate the spectrum plot and set all the settings
    fig, ax = plt.subplots(figsize=(10,10))

    linewidth = 3
    ax.set_yscale('log')

    length = 16 # typically till the resolution length of the dataset
    buffer = 10 # just add a buffer to the plot
    k = np.arange(length + buffer) * 1.0
    ax.plot(truth_sp, 'k', linestyle=":", label="NS", linewidth=4)

    ax.set_xlim(1,length+buffer)
    ax.set_ylim(10, 10^10)
    plt.legend(prop={'size': 20})
    plt.title('Spectrum of {} Datset'.format(dataset_name))

    plt.xlabel('wavenumber')
    plt.ylabel('energy')

    # show the figure
    leg = plt.legend(loc='best')
    leg.get_frame().set_alpha(0.5)
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_darcy_flow_spectrum_001.png
   :alt: Spectrum of Darcy Flow Datset
   :srcset: /auto_examples/images/sphx_glr_plot_darcy_flow_spectrum_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/neuraloperator/neuraloperator/examples/plot_darcy_flow_spectrum.py:104: UserWarning: Attempt to set non-positive ylim on a log-scaled axis will be ignored.
      ax.set_ylim(10, 10^10)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.204 seconds)


.. _sphx_glr_download_auto_examples_plot_darcy_flow_spectrum.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_darcy_flow_spectrum.ipynb <plot_darcy_flow_spectrum.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_darcy_flow_spectrum.py <plot_darcy_flow_spectrum.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_darcy_flow_spectrum.zip <plot_darcy_flow_spectrum.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
