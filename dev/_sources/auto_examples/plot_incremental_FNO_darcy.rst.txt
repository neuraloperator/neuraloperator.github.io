
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_incremental_FNO_darcy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_incremental_FNO_darcy.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_incremental_FNO_darcy.py:


Training a neural operator on Darcy-Flow - Author Robert Joseph George
========================================
In this example, we demonstrate how to use the small Darcy-Flow example we ship with the package on Incremental FNO and Incremental Resolution

.. GENERATED FROM PYTHON SOURCE LINES 9-22

.. code-block:: Python


    import torch
    import matplotlib.pyplot as plt
    import sys
    from neuralop.models import FNO
    from neuralop.data.datasets import load_darcy_flow_small
    from neuralop.utils import count_model_params
    from neuralop.training import AdamW
    from neuralop.training.incremental import IncrementalFNOTrainer
    from neuralop.data.transforms.data_processors import IncrementalDataProcessor
    from neuralop import LpLoss, H1Loss









.. GENERATED FROM PYTHON SOURCE LINES 23-24

Loading the Darcy flow dataset

.. GENERATED FROM PYTHON SOURCE LINES 24-32

.. code-block:: Python

    train_loader, test_loaders, output_encoder = load_darcy_flow_small(
        n_train=100,
        batch_size=16,
        test_resolutions=[16, 32],
        n_tests=[100, 50],
        test_batch_sizes=[32, 32],
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/neuraloperator/neuraloperator/neuralop/data/datasets/pt_dataset.py:93: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
      data = torch.load(
    Loading test db for resolution 16 with 100 samples 
    /home/runner/work/neuraloperator/neuraloperator/neuralop/data/datasets/pt_dataset.py:172: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
      data = torch.load(Path(root_dir).joinpath(f"{dataset_name}_test_{res}.pt").as_posix())
    Loading test db for resolution 32 with 50 samples 




.. GENERATED FROM PYTHON SOURCE LINES 33-34

Choose device

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: Python

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")








.. GENERATED FROM PYTHON SOURCE LINES 37-40

Set up the incremental FNO model
We start with 2 modes in each dimension
We choose to update the modes by the incremental gradient explained algorithm

.. GENERATED FROM PYTHON SOURCE LINES 40-46

.. code-block:: Python

    incremental = True
    if incremental:
        starting_modes = (2, 2)
    else:
        starting_modes = (16, 16)








.. GENERATED FROM PYTHON SOURCE LINES 47-48

set up model

.. GENERATED FROM PYTHON SOURCE LINES 48-58

.. code-block:: Python

    model = FNO(
        max_n_modes=(16, 16),
        n_modes=starting_modes,
        hidden_channels=32,
        in_channels=1,
        out_channels=1,
    )
    model = model.to(device)
    n_params = count_model_params(model)








.. GENERATED FROM PYTHON SOURCE LINES 59-60

Set up the optimizer and scheduler

.. GENERATED FROM PYTHON SOURCE LINES 60-85

.. code-block:: Python

    optimizer = AdamW(model.parameters(), lr=8e-3, weight_decay=1e-4)
    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)


    # If one wants to use Incremental Resolution, one should use the IncrementalDataProcessor - When passed to the trainer, the trainer will automatically update the resolution
    # Incremental_resolution : bool, default is False
    #    if True, increase the resolution of the input incrementally
    #    uses the incremental_res_gap parameter
    #    uses the subsampling_rates parameter - a list of resolutions to use
    #    uses the dataset_indices parameter - a list of indices of the dataset to slice to regularize the input resolution
    #    uses the dataset_resolution parameter - the resolution of the input
    #    uses the epoch_gap parameter - the number of epochs to wait before increasing the resolution
    #    uses the verbose parameter - if True, print the resolution and the number of modes
    data_transform = IncrementalDataProcessor(
        in_normalizer=None,
        out_normalizer=None,
        device=device,
        subsampling_rates=[2, 1],
        dataset_resolution=16,
        dataset_indices=[2, 3],
        epoch_gap=10,
        verbose=True,
    )

    data_transform = data_transform.to(device)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Original Incre Res: change index to 0
    Original Incre Res: change sub to 2
    Original Incre Res: change res to 8




.. GENERATED FROM PYTHON SOURCE LINES 86-87

Set up the losses

.. GENERATED FROM PYTHON SOURCE LINES 87-100

.. code-block:: Python

    l2loss = LpLoss(d=2, p=2)
    h1loss = H1Loss(d=2)
    train_loss = h1loss
    eval_losses = {"h1": h1loss, "l2": l2loss}
    print("\n### N PARAMS ###\n", n_params)
    print("\n### OPTIMIZER ###\n", optimizer)
    print("\n### SCHEDULER ###\n", scheduler)
    print("\n### LOSSES ###")
    print("\n### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###")
    print(f"\n * Train: {train_loss}")
    print(f"\n * Test: {eval_losses}")
    sys.stdout.flush()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ### N PARAMS ###
     2119329

    ### OPTIMIZER ###
     AdamW (
    Parameter Group 0
        betas: (0.9, 0.999)
        correct_bias: True
        eps: 1e-06
        initial_lr: 0.008
        lr: 0.008
        weight_decay: 0.0001
    )

    ### SCHEDULER ###
     <torch.optim.lr_scheduler.CosineAnnealingLR object at 0x7f59948a7eb0>

    ### LOSSES ###

    ### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###

     * Train: <neuralop.losses.data_losses.H1Loss object at 0x7f5984337490>

     * Test: {'h1': <neuralop.losses.data_losses.H1Loss object at 0x7f5984337490>, 'l2': <neuralop.losses.data_losses.LpLoss object at 0x7f5984337e50>}




.. GENERATED FROM PYTHON SOURCE LINES 101-116

Set up the IncrementalTrainer
other options include setting incremental_loss_gap = True
If one wants to use incremental resolution set it to True
In this example we only update the modes and not the resolution
When using the incremental resolution one should keep in mind that the numnber of modes initially set should be strictly less than the resolution
Again these are the various paramaters for the various incremental settings
incremental_grad : bool, default is False
   if True, use the base incremental algorithm which is based on gradient variance
   uses the incremental_grad_eps parameter - set the threshold for gradient variance
   uses the incremental_buffer paramater - sets the number of buffer modes to calculate the gradient variance
   uses the incremental_max_iter parameter - sets the initial number of iterations
   uses the incremental_grad_max_iter parameter - sets the maximum number of iterations to accumulate the gradients
incremental_loss_gap : bool, default is False
   if True, use the incremental algorithm based on loss gap
   uses the incremental_loss_eps parameter

.. GENERATED FROM PYTHON SOURCE LINES 116-134

.. code-block:: Python



    # Finally pass all of these to the Trainer
    trainer = IncrementalFNOTrainer(
        model=model,
        n_epochs=20,
        data_processor=data_transform,
        device=device,
        verbose=True,
        incremental_loss_gap=False,
        incremental_grad=True,
        incremental_grad_eps=0.9999,
        incremental_loss_eps = 0.001,
        incremental_buffer=5,
        incremental_max_iter=1,
        incremental_grad_max_iter=2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 135-136

Train the model

.. GENERATED FROM PYTHON SOURCE LINES 136-146

.. code-block:: Python

    trainer.train(
        train_loader,
        test_loaders,
        optimizer,
        scheduler,
        regularizer=False,
        training_loss=train_loss,
        eval_losses=eval_losses,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Training on 100 samples
    Testing on [50, 50] samples         on resolutions [16, 32].
    Raw outputs of shape torch.Size([16, 1, 8, 8])
    [0] time=0.21, avg_loss=0.7750, train_err=11.0714
    Eval: 16_h1=0.7031, 16_l2=0.5348, 32_h1=0.7319, 32_l2=0.5357
    [1] time=0.20, avg_loss=0.5908, train_err=8.4395
    Eval: 16_h1=0.6114, 16_l2=0.4391, 32_h1=0.6716, 32_l2=0.4473
    [2] time=0.20, avg_loss=0.5093, train_err=7.2754
    Eval: 16_h1=0.5647, 16_l2=0.3843, 32_h1=0.6667, 32_l2=0.3946
    [3] time=0.20, avg_loss=0.4408, train_err=6.2975
    Eval: 16_h1=0.5216, 16_l2=0.3600, 32_h1=0.6661, 32_l2=0.3915
    [4] time=0.20, avg_loss=0.4055, train_err=5.7927
    Eval: 16_h1=0.5165, 16_l2=0.3631, 32_h1=0.6852, 32_l2=0.4008
    [5] time=0.21, avg_loss=0.3794, train_err=5.4201
    Eval: 16_h1=0.5407, 16_l2=0.4053, 32_h1=0.6456, 32_l2=0.4213
    [6] time=0.21, avg_loss=0.3662, train_err=5.2311
    Eval: 16_h1=0.4848, 16_l2=0.3434, 32_h1=0.6641, 32_l2=0.3786
    [7] time=0.21, avg_loss=0.3320, train_err=4.7433
    Eval: 16_h1=0.4515, 16_l2=0.3280, 32_h1=0.5890, 32_l2=0.3661
    [8] time=0.21, avg_loss=0.3013, train_err=4.3041
    Eval: 16_h1=0.4443, 16_l2=0.3024, 32_h1=0.6300, 32_l2=0.3467
    [9] time=0.22, avg_loss=0.2621, train_err=3.7436
    Eval: 16_h1=0.4252, 16_l2=0.2978, 32_h1=0.6085, 32_l2=0.3395
    Incre Res Update: change index to 1
    Incre Res Update: change sub to 1
    Incre Res Update: change res to 16
    [10] time=0.29, avg_loss=0.3530, train_err=5.0422
    Eval: 16_h1=0.3418, 16_l2=0.2496, 32_h1=0.4258, 32_l2=0.2477
    [11] time=0.28, avg_loss=0.2891, train_err=4.1300
    Eval: 16_h1=0.3833, 16_l2=0.2783, 32_h1=0.4696, 32_l2=0.2820
    [12] time=0.29, avg_loss=0.2975, train_err=4.2504
    Eval: 16_h1=0.3179, 16_l2=0.2267, 32_h1=0.4156, 32_l2=0.2404
    [13] time=0.30, avg_loss=0.2420, train_err=3.4567
    Eval: 16_h1=0.2829, 16_l2=0.2034, 32_h1=0.3807, 32_l2=0.2174
    [14] time=0.30, avg_loss=0.2147, train_err=3.0676
    Eval: 16_h1=0.3394, 16_l2=0.2630, 32_h1=0.4255, 32_l2=0.2714
    [15] time=0.30, avg_loss=0.2232, train_err=3.1885
    Eval: 16_h1=0.3785, 16_l2=0.2985, 32_h1=0.4668, 32_l2=0.3102
    [16] time=0.31, avg_loss=0.2555, train_err=3.6494
    Eval: 16_h1=0.3279, 16_l2=0.2593, 32_h1=0.4078, 32_l2=0.2623
    [17] time=0.31, avg_loss=0.2769, train_err=3.9559
    Eval: 16_h1=0.4073, 16_l2=0.3371, 32_h1=0.4499, 32_l2=0.3422
    [18] time=0.31, avg_loss=0.2840, train_err=4.0576
    Eval: 16_h1=0.2826, 16_l2=0.2202, 32_h1=0.3649, 32_l2=0.2272
    [19] time=0.31, avg_loss=0.1984, train_err=2.8340
    Eval: 16_h1=0.2795, 16_l2=0.2186, 32_h1=0.3582, 32_l2=0.2296

    {'train_err': 2.8339713641575406, 'avg_loss': 0.19837799549102783, 'avg_lasso_loss': None, 'epoch_train_time': 0.30820857799994883, '16_h1': tensor(0.2795), '16_l2': tensor(0.2186), '32_h1': tensor(0.3582), '32_l2': tensor(0.2296)}



.. GENERATED FROM PYTHON SOURCE LINES 147-157

Plot the prediction, and compare with the ground-truth
Note that we trained on a very small resolution for
a very small number of epochs
In practice, we would train at larger resolution, on many more samples.

However, for practicity, we created a minimal example that
i) fits in just a few Mb of memory
ii) can be trained quickly on CPU

In practice we would train a Neural Operator on one or multiple GPUs

.. GENERATED FROM PYTHON SOURCE LINES 157-195

.. code-block:: Python


    test_samples = test_loaders[32].dataset

    fig = plt.figure(figsize=(7, 7))
    for index in range(3):
        data = test_samples[index]
        # Input x
        x = data["x"].to(device)
        # Ground-truth
        y = data["y"].to(device)
        # Model prediction
        out = model(x.unsqueeze(0))
        ax = fig.add_subplot(3, 3, index * 3 + 1)
        x = x.cpu().squeeze().detach().numpy()
        y = y.cpu().squeeze().detach().numpy()
        ax.imshow(x, cmap="gray")
        if index == 0:
            ax.set_title("Input x")
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(3, 3, index * 3 + 2)
        ax.imshow(y.squeeze())
        if index == 0:
            ax.set_title("Ground-truth y")
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(3, 3, index * 3 + 3)
        ax.imshow(out.cpu().squeeze().detach().numpy())
        if index == 0:
            ax.set_title("Model prediction")
        plt.xticks([], [])
        plt.yticks([], [])

    fig.suptitle("Inputs, ground-truth output and prediction.", y=0.98)
    plt.tight_layout()
    fig.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_incremental_FNO_darcy_001.png
   :alt: Inputs, ground-truth output and prediction., Input x, Ground-truth y, Model prediction
   :srcset: /auto_examples/images/sphx_glr_plot_incremental_FNO_darcy_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 7.454 seconds)


.. _sphx_glr_download_auto_examples_plot_incremental_FNO_darcy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_incremental_FNO_darcy.ipynb <plot_incremental_FNO_darcy.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_incremental_FNO_darcy.py <plot_incremental_FNO_darcy.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_incremental_FNO_darcy.zip <plot_incremental_FNO_darcy.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
