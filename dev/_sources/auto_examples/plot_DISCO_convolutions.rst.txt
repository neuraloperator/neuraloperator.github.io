
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_DISCO_convolutions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_DISCO_convolutions.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_DISCO_convolutions.py:


Visualization of discrete-continuous convolutions
==========================================================

In this example, we demonstrate the usage of the discrete-continuous (DISCO) convolutions
used in the localized neural operator framework. These modules can be used on both equidistant
and unstructured grids.

.. GENERATED FROM PYTHON SOURCE LINES 11-12

Preparation

.. GENERATED FROM PYTHON SOURCE LINES 12-32

.. code-block:: Python



    import os
    import torch
    import torch.nn as nn
    import numpy as np
    import math
    from functools import partial

    from matplotlib import image

    from torch_harmonics.quadrature import legendre_gauss_weights, lobatto_weights, clenshaw_curtiss_weights

    import matplotlib.pyplot as plt

    cmap="inferno"
    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

    from neuralop.layers.discrete_continuous_convolution import DiscreteContinuousConv2d, DiscreteContinuousConvTranspose2d, EquidistantDiscreteContinuousConv2d, EquidistantDiscreteContinuousConvTranspose2d








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Let's start by loading an example image

.. GENERATED FROM PYTHON SOURCE LINES 34-44

.. code-block:: Python

    os.system("curl https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Albert_Einstein_Head.jpg/360px-Albert_Einstein_Head.jpg -o ./einstein.jpg")

    nx = 90
    ny = 120

    img = image.imread('./einstein.jpg')
    data = nn.functional.interpolate(torch.from_numpy(img).unsqueeze(0).unsqueeze(0), size=(ny,nx)).squeeze()
    plt.imshow(data, cmap=cmap)
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_001.png
   :alt: plot DISCO convolutions
   :srcset: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/neuraloperator/neuraloperator/examples/plot_DISCO_convolutions.py:40: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at ../torch/csrc/utils/tensor_numpy.cpp:206.)
      data = nn.functional.interpolate(torch.from_numpy(img).unsqueeze(0).unsqueeze(0), size=(ny,nx)).squeeze()




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Let's create a grid on which the data lives

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: Python


    x_in = torch.linspace(0, 2, nx)
    y_in = torch.linspace(0, 3, ny)

    x_in, y_in = torch.meshgrid(x_in, y_in)
    grid_in = torch.stack([x_in.reshape(-1), y_in.reshape(-1)])

    # compute the correct quadrature weights
    # IMPORTANT: this needs to be done right in order for the DISCO convolution to be normalized proeperly
    w_x = 2*torch.ones_like(x_in) / nx
    w_y = 3*torch.ones_like(y_in) / ny
    q_in = (w_x * w_y).reshape(-1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
      return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]




.. GENERATED FROM PYTHON SOURCE LINES 60-61

Visualize the grid

.. GENERATED FROM PYTHON SOURCE LINES 61-69

.. code-block:: Python


    plt.figure(figsize=(4,6), )
    plt.scatter(grid_in[0], grid_in[1], s=0.2)
    plt.xlim(0,2)
    plt.ylim(0,3)
    plt.show()





.. image-sg:: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_002.png
   :alt: plot DISCO convolutions
   :srcset: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 70-71

Format data into the same format and plot it on the grid

.. GENERATED FROM PYTHON SOURCE LINES 71-81

.. code-block:: Python


    data = data.permute(1,0).flip(1).reshape(-1)

    plt.figure(figsize=(4,6), )
    plt.tripcolor(grid_in[0], grid_in[1], data, cmap=cmap)
    # plt.colorbar()
    plt.xlim(0,2)
    plt.ylim(0,3)
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_003.png
   :alt: plot DISCO convolutions
   :srcset: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-83

For the convolution output we require an output mesh

.. GENERATED FROM PYTHON SOURCE LINES 83-97

.. code-block:: Python

    nxo = 90
    nyo = 120

    x_out = torch.linspace(0, 2, nxo)
    y_out = torch.linspace(0, 3, nyo)

    x_out, y_out = torch.meshgrid(x_out, y_out)
    grid_out = torch.stack([x_out.reshape(-1), y_out.reshape(-1)])

    # compute the correct quadrature weights
    w_x = 2*torch.ones_like(x_out) / nxo
    w_y = 3*torch.ones_like(y_out) / nyo
    q_out = (w_x * w_y).reshape(-1)








.. GENERATED FROM PYTHON SOURCE LINES 98-99

Initialize the convolution and set the weights to something resembling an edge filter/finit differences

.. GENERATED FROM PYTHON SOURCE LINES 99-108

.. code-block:: Python

    conv = DiscreteContinuousConv2d(1, 1, grid_in=grid_in, grid_out=grid_out, quadrature_weights=q_in, kernel_shape=[2,4], radius_cutoff=5/nyo, periodic=False).float()

    # initialize a kernel resembling an edge filter
    w = torch.zeros_like(conv.weight)
    w[0,0,1] = 1.0
    w[0,0,3] = -1.0
    conv.weight = nn.Parameter(w)
    psi = conv.get_local_filter_matrix()








.. GENERATED FROM PYTHON SOURCE LINES 109-110

in order to compute the convolved image, we need to first bring it into the right shape with `batch_size x n_channels x n_grid_points`

.. GENERATED FROM PYTHON SOURCE LINES 110-121

.. code-block:: Python

    out = conv(data.reshape(1, 1, -1))

    print(out.shape)

    plt.figure(figsize=(4,6), )
    plt.imshow(torch.flip(out.squeeze().detach().reshape(nxo, nyo).transpose(0,1), dims=(-2, )), cmap=cmap)
    plt.colorbar()
    plt.show()

    out1 = torch.flip(out.squeeze().detach().reshape(nxo, nyo).transpose(0,1), dims=(-2, ))




.. image-sg:: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_004.png
   :alt: plot DISCO convolutions
   :srcset: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch.Size([1, 1, 10800])




.. GENERATED FROM PYTHON SOURCE LINES 122-145

.. code-block:: Python

    conv_equi = EquidistantDiscreteContinuousConv2d(1, 1, (nx, ny), (nxo, nyo), kernel_shape=[2,4], radius_cutoff=5/nyo, domain_length=[2,3])

    # initialize a kernel resembling an edge filter
    w = torch.zeros_like(conv.weight)
    w[0,0,1] = 1.0
    w[0,0,3] = -1.0
    conv_equi.weight = nn.Parameter(w)

    data = nn.functional.interpolate(torch.from_numpy(img).unsqueeze(0).unsqueeze(0), size=(ny,nx)).float()

    out_equi = conv_equi(data)

    print(out_equi.shape)

    plt.figure(figsize=(4,6), )
    plt.imshow(out_equi.squeeze().detach(), cmap=cmap)
    plt.colorbar()
    plt.show()

    out2 = out_equi.squeeze().detach()

    print(out2.shape)




.. image-sg:: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_005.png
   :alt: plot DISCO convolutions
   :srcset: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch.Size([1, 1, 119, 89])
    torch.Size([119, 89])




.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: Python


    plt.figure(figsize=(4,6), )
    plt.imshow(conv_equi.get_local_filter_matrix()[0].detach(), cmap=cmap)
    plt.colorbar()

    # # %%

    # print("plt the error:")
    # plt.figure(figsize=(4,6), )
    # plt.imshow(out1 - out2, cmap=cmap)
    # plt.colorbar()
    # plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_006.png
   :alt: plot DISCO convolutions
   :srcset: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.colorbar.Colorbar object at 0x7f61d16f9bd0>



.. GENERATED FROM PYTHON SOURCE LINES 160-182

.. code-block:: Python

    convt = DiscreteContinuousConvTranspose2d(1, 1, grid_in=grid_out, grid_out=grid_in, quadrature_weights=q_out, kernel_shape=[2,4], radius_cutoff=3/nyo, periodic=False).float()

    # initialize a flat
    w = torch.zeros_like(conv.weight)
    w[0,0,0] = 1.0
    w[0,0,1] = 1.0
    w[0,0,2] = 1.0
    w[0,0,3] = 1.0
    convt.weight = nn.Parameter(w)

    data = nn.functional.interpolate(torch.from_numpy(img).unsqueeze(0).unsqueeze(0), size=(ny,nx)).squeeze().float().permute(1,0).flip(1).reshape(-1)
    out = convt(data.reshape(1, 1, -1))

    print(out.shape)

    plt.figure(figsize=(4,6), )
    plt.imshow(torch.flip(out.squeeze().detach().reshape(nx, ny).transpose(0,1), dims=(-2, )), cmap=cmap)
    plt.colorbar()
    plt.show()






.. image-sg:: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_007.png
   :alt: plot DISCO convolutions
   :srcset: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch.Size([1, 1, 10800])




.. GENERATED FROM PYTHON SOURCE LINES 183-201

.. code-block:: Python

    convt_equi = EquidistantDiscreteContinuousConvTranspose2d(1, 1, (nxo, nyo), (nx, ny), kernel_shape=[2,4], radius_cutoff=3/nyo, domain_length=[2,3])

    # initialize a flat
    w = torch.zeros_like(convt_equi.weight)
    w[0,0,0] = 1.0
    w[0,0,1] = 1.0
    w[0,0,2] = 1.0
    w[0,0,3] = 1.0
    convt_equi.weight = nn.Parameter(w)

    data = nn.functional.interpolate(torch.from_numpy(img).unsqueeze(0).unsqueeze(0), size=(nyo,nxo)).float()
    out_equi = convt_equi(data)

    print(out_equi.shape)

    plt.figure(figsize=(4,6), )
    plt.imshow(out_equi.squeeze().detach(), cmap=cmap)
    plt.colorbar()
    plt.show()


.. image-sg:: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_008.png
   :alt: plot DISCO convolutions
   :srcset: /auto_examples/images/sphx_glr_plot_DISCO_convolutions_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch.Size([1, 1, 120, 90])





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 31.974 seconds)


.. _sphx_glr_download_auto_examples_plot_DISCO_convolutions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_DISCO_convolutions.ipynb <plot_DISCO_convolutions.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_DISCO_convolutions.py <plot_DISCO_convolutions.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_DISCO_convolutions.zip <plot_DISCO_convolutions.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
